// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	api "github.com/devshark/wallet/api"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetAccountBalance provides a mock function with given fields: ctx, currency, accountId
func (_m *MockRepository) GetAccountBalance(ctx context.Context, currency string, accountId string) (*api.Account, error) {
	ret := _m.Called(ctx, currency, accountId)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 *api.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*api.Account, error)); ok {
		return rf(ctx, currency, accountId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *api.Account); ok {
		r0 = rf(ctx, currency, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, currency, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type MockRepository_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - currency string
//   - accountId string
func (_e *MockRepository_Expecter) GetAccountBalance(ctx interface{}, currency interface{}, accountId interface{}) *MockRepository_GetAccountBalance_Call {
	return &MockRepository_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", ctx, currency, accountId)}
}

func (_c *MockRepository_GetAccountBalance_Call) Run(run func(ctx context.Context, currency string, accountId string)) *MockRepository_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_GetAccountBalance_Call) Return(_a0 *api.Account, _a1 error) *MockRepository_GetAccountBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAccountBalance_Call) RunAndReturn(run func(context.Context, string, string) (*api.Account, error)) *MockRepository_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx, txId
func (_m *MockRepository) GetTransaction(ctx context.Context, txId string) (*api.Transaction, error) {
	ret := _m.Called(ctx, txId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *api.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*api.Transaction, error)); ok {
		return rf(ctx, txId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *api.Transaction); ok {
		r0 = rf(ctx, txId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockRepository_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txId string
func (_e *MockRepository_Expecter) GetTransaction(ctx interface{}, txId interface{}) *MockRepository_GetTransaction_Call {
	return &MockRepository_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx, txId)}
}

func (_c *MockRepository_GetTransaction_Call) Run(run func(ctx context.Context, txId string)) *MockRepository_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetTransaction_Call) Return(_a0 *api.Transaction, _a1 error) *MockRepository_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetTransaction_Call) RunAndReturn(run func(context.Context, string) (*api.Transaction, error)) *MockRepository_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: ctx, currency, accountId
func (_m *MockRepository) GetTransactions(ctx context.Context, currency string, accountId string) ([]*api.Transaction, error) {
	ret := _m.Called(ctx, currency, accountId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []*api.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*api.Transaction, error)); ok {
		return rf(ctx, currency, accountId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*api.Transaction); ok {
		r0 = rf(ctx, currency, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, currency, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type MockRepository_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - currency string
//   - accountId string
func (_e *MockRepository_Expecter) GetTransactions(ctx interface{}, currency interface{}, accountId interface{}) *MockRepository_GetTransactions_Call {
	return &MockRepository_GetTransactions_Call{Call: _e.mock.On("GetTransactions", ctx, currency, accountId)}
}

func (_c *MockRepository_GetTransactions_Call) Run(run func(ctx context.Context, currency string, accountId string)) *MockRepository_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_GetTransactions_Call) Return(_a0 []*api.Transaction, _a1 error) *MockRepository_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetTransactions_Call) RunAndReturn(run func(context.Context, string, string) ([]*api.Transaction, error)) *MockRepository_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// Transfer provides a mock function with given fields: ctx, request, idempotencyKey
func (_m *MockRepository) Transfer(ctx context.Context, request *api.TransferRequest, idempotencyKey string) ([]*api.Transaction, error) {
	ret := _m.Called(ctx, request, idempotencyKey)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 []*api.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.TransferRequest, string) ([]*api.Transaction, error)); ok {
		return rf(ctx, request, idempotencyKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.TransferRequest, string) []*api.Transaction); ok {
		r0 = rf(ctx, request, idempotencyKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.TransferRequest, string) error); ok {
		r1 = rf(ctx, request, idempotencyKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type MockRepository_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - ctx context.Context
//   - request *api.TransferRequest
//   - idempotencyKey string
func (_e *MockRepository_Expecter) Transfer(ctx interface{}, request interface{}, idempotencyKey interface{}) *MockRepository_Transfer_Call {
	return &MockRepository_Transfer_Call{Call: _e.mock.On("Transfer", ctx, request, idempotencyKey)}
}

func (_c *MockRepository_Transfer_Call) Run(run func(ctx context.Context, request *api.TransferRequest, idempotencyKey string)) *MockRepository_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.TransferRequest), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_Transfer_Call) Return(_a0 []*api.Transaction, _a1 error) *MockRepository_Transfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Transfer_Call) RunAndReturn(run func(context.Context, *api.TransferRequest, string) ([]*api.Transaction, error)) *MockRepository_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
